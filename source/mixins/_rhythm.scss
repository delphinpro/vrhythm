@import "grid-background";
@import "units";

// The leader is the amount of whitespace in a line.
// It might be useful in your calculations.
$_rhythm-base-leader: convert-length($rhythm-base-line-height - $rhythm-base-font-size, $rhythm-unit, $rhythm-base-font-size);

// The half-leader is the amount of whitespace above and below a line.
// It might be useful in your calculations.
$_rhythm-base-half-leader: $_rhythm-base-leader / 2;

// @private Whether the rhythm output is in absolute units (px) or not (em, rem)
$_rhythm-relative-font-sizing: if($rhythm-unit == px, false, true);

// Validate units
@if unit($rhythm-base-font-size)   != 'px' { @warn "$base-font-size must resolve to a pixel unit."; }

@if unit($rhythm-base-line-height) != 'px' { @warn "$base-line-height must resolve to a pixel unit."; }

@if $rhythm-unit != 'px' and $rhythm-unit != 'em' and $rhythm-unit != 'rem' {
  @warn "$rhythm-unit must be `px`, `em` or `rem`.";
}

// Calculate rhythm units.
@function rhythm($lines: 1, $font-size: $rhythm-base-font-size, $offset: 0) {
  $rhythm: convert-length($lines * $rhythm-base-line-height - $offset, $rhythm-unit, $font-size);
  @if unit($rhythm) == px {
    $rhythm: floor($rhythm);
  }
  @return $rhythm;
}

// Calculate the minimum multiple of rhythm units needed to contain the font-size.
@function lines-for-font-size($font-size) {
  $lines: if($rhythm-round-to-nearest-half-line,
      ceil(2 * $font-size / $rhythm-base-line-height) / 2,
      ceil($font-size / $rhythm-base-line-height));
  // If lines are cramped include some extra lead.
  @if ($lines * $rhythm-base-line-height - $font-size) < ($rhythm-min-line-padding * 2) {
    $lines: $lines + if($rhythm-round-to-nearest-half-line, 0.5, 1);
  }
  @return $lines;
}

// @private Outputs rhythm values. For rem units, outputs pixel fallbacks
// by default.
@mixin output-rhythm($property, $values) {
  @if $rhythm-unit == rem and $rhythm-rem-with-px-fallback {
    @include rem($property, $values);
  } @else {
    $output: ();
    @each $value in $values {
      @if unit($value) == px {
        // Ensure all pixel values are rounded to the nearest pixel.
        $output: join($output, round($value));
      } @else {
        $output: join($output, $value);
      }
    }
    #{$property}: $output;
  }
}

// Establishes a font baseline for the given font-size.
@mixin establish-baseline($font-size: $rhythm-base-font-size) {
  $relative-size: 100% * ($font-size / $_rhythm-browser-default-font-size);

  html {
    font-size: if($_rhythm-relative-font-sizing, $relative-size, $font-size);

    // Webkit has a bug that prevents line-height being set in rem on <html>;
    // To work around this and simplify output, we can set initial line-height
    // in ems for all relative rhythm units, even when $rhythm-unit is `rem`.
    @if $_rhythm-relative-font-sizing {
      line-height: convert-length($rhythm-base-line-height, em);
    } @else {
      line-height: round($rhythm-base-line-height);
    }
    @content;
  }
}

// Show a background image that can be used to debug your alignments.
// As this is a development feature, this mixin never outputs pixel fallbacks
// for rem output.
// Include the $img argument if you would rather use your own image than the
// Compass default gradient image.
@mixin debug-vertical-alignment($color: $rhythm-grid-baseline-color) {
  @include baseline-grid-background(if($rhythm-round-to-nearest-half-line, rhythm(1/2), rhythm(1)), $color);
}

// Adjust a block to have different line height to maintain the rhythm.
// $lines specifies how many multiples of the baseline rhythm each line of this
// font should use up. It does not have to be an integer, but it defaults to the
// smallest integer that is large enough to fit the font.
@mixin adjust-leading-to($lines, $font-size: $rhythm-base-font-size) {
  @include output-rhythm(line-height, rhythm($lines, $font-size));
}

// Apply leading whitespace. The $property can be margin or padding.
@mixin leader($lines: 1, $font-size: $rhythm-base-font-size, $property: margin) {
  @include output-rhythm(#{$property}-top, rhythm($lines, $font-size));
}

// Apply leading whitespace as padding.
@mixin padding-leader($lines: 1, $font-size: $rhythm-base-font-size) {
  @include output-rhythm(padding-top, rhythm($lines, $font-size));
}

// Apply leading whitespace as margin.
@mixin margin-leader($lines: 1, $font-size: $rhythm-base-font-size) {
  @include output-rhythm(margin-top, rhythm($lines, $font-size));
}

// Apply trailing whitespace. The $property can be margin or padding.
@mixin trailer($lines: 1, $font-size: $rhythm-base-font-size, $property: margin) {
  @include output-rhythm(#{$property}-bottom, rhythm($lines, $font-size));
}

// Apply trailing whitespace as padding.
@mixin padding-trailer($lines: 1, $font-size: $rhythm-base-font-size) {
  @include output-rhythm(padding-bottom, rhythm($lines, $font-size));
}

// Apply trailing whitespace as margin.
@mixin margin-trailer($lines: 1, $font-size: $rhythm-base-font-size) {
  @include output-rhythm(margin-bottom, rhythm($lines, $font-size));
}

// Shorthand mixin to apply whitespace for top and bottom margins and padding.
@mixin rhythm(
  $leader: 1,
  $padding-leader: 0,
  $padding-trailer: $padding-leader,
  $trailer: $leader,
  $font-size: $rhythm-base-font-size
) {
  @include leader($leader, $font-size);
  @include padding-leader($padding-leader, $font-size);
  @include padding-trailer($padding-trailer, $font-size);
  @include trailer($trailer, $font-size);
}

// Shorthand mixin to apply whitespace for top and bottom margins.
@mixin rhythm-margins(
  $leader: 1,
  $trailer: $leader,
  $font-size: $rhythm-base-font-size
) {
  @include leader($leader, $font-size);
  @include trailer($trailer, $font-size);
}

// Shorthand mixin to apply whitespace for top and bottom padding.
@mixin rhythm-padding(
  $padding-leader: 1,
  $padding-trailer: $padding-leader,
  $font-size: $rhythm-base-font-size
) {
  @include padding-leader($padding-leader, $font-size);
  @include padding-trailer($padding-trailer, $font-size);
}

// Apply a border and whitespace to any side without destroying the vertical
// rhythm. The whitespace must be greater than the width of the border.
@mixin apply-side-rhythm-border(
  $side,
  $width: $rhythm-default-border-width,
  $lines: 1,
  $font-size: $rhythm-base-font-size,
  $border-style: $rhythm-default-border-style
) {
  // If applying borders to all sides, use shorthand properties
  $border-prop: if($side == all, border, border-#{$side});
  @include output-rhythm(#{$border-prop}-width, convert-length($width, $rhythm-unit, $font-size));
  #{$border-prop}-style: nth($border-style, 1);
  @if type-of($border-style) == list and length($border-style) > 1 {
    #{$border-prop}-color: nth($border-style, 2);
  }
  $padding-prop: if($side == all, padding, padding-#{$side});
  @include output-rhythm(#{$padding-prop}, rhythm($lines, $font-size, $offset: $width));
}

// Apply a leading border.
// $border-style and $width are deprecated and will be removed in a future version of Compass.
@mixin leading-border(
  $width: $rhythm-default-border-width,
  $lines: 1,
  $font-size: $rhythm-base-font-size,
  $border-style: $rhythm-default-border-style
) {
  @include apply-side-rhythm-border(top, $width, $lines, $font-size, $border-style);
}

// Apply a trailing border.
@mixin trailing-border(
  $width: $rhythm-default-border-width,
  $lines: 1,
  $font-size: $rhythm-base-font-size,
  $border-style: $rhythm-default-border-style
) {
  @include apply-side-rhythm-border(bottom, $width, $lines, $font-size, $border-style);
}

// Apply both leading and trailing borders.
@mixin horizontal-borders(
  $width: $rhythm-default-border-width,
  $lines: 1,
  $font-size: $rhythm-base-font-size,
  $border-style: $rhythm-default-border-style
) {
  @include leading-border($width, $lines, $font-size, $border-style);
  @include trailing-border($width, $lines, $font-size, $border-style);
}

// Alias for `horizontal-borders` mixin.
@mixin h-borders(
  $width: $rhythm-default-border-width,
  $lines: 1,
  $font-size: $rhythm-base-font-size,
  $border-style: $rhythm-default-border-style
) {
  @include horizontal-borders($width, $lines, $font-size, $border-style);
}

// Apply borders and whitespace equally to all sides.
@mixin rhythm-borders(
  $width: $rhythm-default-border-width,
  $lines: 1,
  $font-size: $rhythm-base-font-size,
  $border-style: $rhythm-default-border-style
) {
  @include apply-side-rhythm-border(all, $width, $lines, $font-size, $border-style);
}

// Adjust a block to have a different font size and line height to maintain the
// rhythm. $lines specifies how many multiples of the baseline rhythm each line
// of this font should use up. It does not have to be an integer, but it
// defaults to the smallest integer that is large enough to fit the font.
// Use $from-size to adjust from a font-size other than the base font-size.
@mixin adjust-font-size-to($to-size, $lines: auto, $from-size: $rhythm-base-font-size) {
  $to-size: convert-length($to-size, px, $from-size);
  @if $lines == auto {
    $lines: lines-for-font-size($to-size);
  }
  @include output-rhythm(font-size, convert-length($to-size, $rhythm-unit, $from-size));
  @include adjust-leading-to($lines, $to-size);
}

@mixin line-height-to($to-size, $line-height: $rhythm-base-line-height) {
  @include adjust-font-size-to($to-size, ($line-height / $rhythm-base-line-height))
}

// Resets the baseline to 1 rhythm unit
// Does not work on elements whose font-size is different from $rhythm-base-font-size.
//
// @deprecated This mixin will be removed in the next release.
// Please use `adjust-leading-to(1)` instead.
@mixin reset-baseline($font-size: $rhythm-base-font-size) {
  @include adjust-leading-to(1, $font-size);
}
